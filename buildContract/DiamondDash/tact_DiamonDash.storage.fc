;;
;; Type: StateInit
;; TLB: _ code:^cell data:^cell = StateInit
;;

((cell, cell)) $StateInit$_not_null(tuple v) inline {
    throw_if(128, null?(v));
    var (cell vvv'code, cell vvv'data) = __tact_tuple_destroy_2(v);
    return (vvv'code, vvv'data);
}

;;
;; Type: Context
;; TLB: _ bounced:bool sender:address value:int257 raw:^slice = Context
;;

_ $Context$_get_value((int, slice, int, slice) v) inline {
    var (v'bounced, v'sender, v'value, v'raw) = v;
    return v'value;
}

;;
;; Type: SendParameters
;; TLB: _ bounce:bool to:address value:int257 mode:int257 body:Maybe ^cell code:Maybe ^cell data:Maybe ^cell = SendParameters
;;

((int, slice, int, int, cell, cell, cell)) $SendParameters$_constructor_to_value(slice to, int value) inline {
    return (true, to, value, 0, null(), null(), null());
}

((int, slice, int, int, cell, cell, cell)) $SendParameters$_constructor_bounce_to_value_mode_body_code_data(int bounce, slice to, int value, int mode, cell body, cell code, cell data) inline {
    return (bounce, to, value, mode, body, code, data);
}

;;
;; Type: Deploy
;; Header: 0x946a98b6
;; TLB: deploy#946a98b6 queryId:uint64 = Deploy
;;

(slice, ((int))) $Deploy$_load(slice sc_0) inline {
    throw_unless(129, sc_0~load_uint(32) == 2490013878);
    var v'queryId = sc_0~load_uint(64);
    return (sc_0, (v'queryId));
}

;;
;; Type: DeployOk
;; Header: 0xaff90f57
;; TLB: deploy_ok#aff90f57 queryId:uint64 = DeployOk
;;

builder $DeployOk$_store(builder build_0, (int) v) inline {
    var (v'queryId) = v;
    build_0 = store_uint(build_0, 2952335191, 32);
    build_0 = build_0.store_uint(v'queryId, 64);
    return build_0;
}

cell $DeployOk$_store_cell((int) v) inline {
    return $DeployOk$_store(begin_cell(), v).end_cell();
}

((int)) $DeployOk$_constructor_queryId(int queryId) inline {
    return (queryId);
}

;;
;; Type: BuyPickAxe
;; Header: 0xebf7e107
;; TLB: buy_pick_axe#ebf7e107 ref:uint32 = BuyPickAxe
;;

(slice, ((int))) $BuyPickAxe$_load(slice sc_0) inline {
    throw_unless(129, sc_0~load_uint(32) == 3958890759);
    var v'ref = sc_0~load_uint(32);
    return (sc_0, (v'ref));
}

;;
;; Type: NewBuy
;; Header: 0x6dc9f7f0
;; TLB: new_buy#6dc9f7f0 amount:uint256 sender:address = NewBuy
;;

builder $NewBuy$_store(builder build_0, (int, slice) v) inline {
    var (v'amount, v'sender) = v;
    build_0 = store_uint(build_0, 1841952752, 32);
    build_0 = build_0.store_uint(v'amount, 256);
    build_0 = __tact_store_address(build_0, v'sender);
    return build_0;
}

cell $NewBuy$_store_cell((int, slice) v) inline {
    return $NewBuy$_store(begin_cell(), v).end_cell();
}

((int, slice)) $NewBuy$_constructor_amount_sender(int amount, slice sender) inline {
    return (amount, sender);
}

;;
;; Type: User
;; TLB: _ deposit:uint256 prom_code:uint32 lastCheck:uint32 upCheck:uint32 level:uint32 roi:uint32 penalty:bool = User
;;

builder $User$_store(builder build_0, (int, int, int, int, int, int, int) v) inline_ref {
    var (v'deposit, v'prom_code, v'lastCheck, v'upCheck, v'level, v'roi, v'penalty) = v;
    build_0 = build_0.store_uint(v'deposit, 256);
    build_0 = build_0.store_uint(v'prom_code, 32);
    build_0 = build_0.store_uint(v'lastCheck, 32);
    build_0 = build_0.store_uint(v'upCheck, 32);
    build_0 = build_0.store_uint(v'level, 32);
    build_0 = build_0.store_uint(v'roi, 32);
    build_0 = build_0.store_int(v'penalty, 1);
    return build_0;
}

cell $User$_store_cell((int, int, int, int, int, int, int) v) inline {
    return $User$_store(begin_cell(), v).end_cell();
}

(slice, ((int, int, int, int, int, int, int))) $User$_load(slice sc_0) inline_ref {
    var v'deposit = sc_0~load_uint(256);
    var v'prom_code = sc_0~load_uint(32);
    var v'lastCheck = sc_0~load_uint(32);
    var v'upCheck = sc_0~load_uint(32);
    var v'level = sc_0~load_uint(32);
    var v'roi = sc_0~load_uint(32);
    var v'penalty = sc_0~load_int(1);
    return (sc_0, (v'deposit, v'prom_code, v'lastCheck, v'upCheck, v'level, v'roi, v'penalty));
}

tuple $User$_as_optional((int, int, int, int, int, int, int) v) inline {
    var (v'deposit, v'prom_code, v'lastCheck, v'upCheck, v'level, v'roi, v'penalty) = v;
    return __tact_tuple_create_7(v'deposit, v'prom_code, v'lastCheck, v'upCheck, v'level, v'roi, v'penalty);
}

tuple $User$_load_opt(cell cl) inline {
    if (null?(cl)) {
        return null();
    }
    var sc = cl.begin_parse();
    return $User$_as_optional(sc~$User$_load());
}

_ $User$_get_prom_code((int, int, int, int, int, int, int) v) inline {
    var (v'deposit, v'prom_code, v'lastCheck, v'upCheck, v'level, v'roi, v'penalty) = v;
    return v'prom_code;
}

_ $User$_get_lastCheck((int, int, int, int, int, int, int) v) inline {
    var (v'deposit, v'prom_code, v'lastCheck, v'upCheck, v'level, v'roi, v'penalty) = v;
    return v'lastCheck;
}

((int, int, int, int, int, int, int)) $User$_not_null(tuple v) inline {
    throw_if(128, null?(v));
    var (int vvv'deposit, int vvv'prom_code, int vvv'lastCheck, int vvv'upCheck, int vvv'level, int vvv'roi, int vvv'penalty) = __tact_tuple_destroy_7(v);
    return (vvv'deposit, vvv'prom_code, vvv'lastCheck, vvv'upCheck, vvv'level, vvv'roi, vvv'penalty);
}

tuple $User$_to_tuple(((int, int, int, int, int, int, int)) v) inline {
    var (v'deposit, v'prom_code, v'lastCheck, v'upCheck, v'level, v'roi, v'penalty) = v;
    return __tact_tuple_create_7(v'deposit, v'prom_code, v'lastCheck, v'upCheck, v'level, v'roi, v'penalty);
}

tuple $User$_to_opt_tuple(tuple v) inline {
    if (null?(v)) { return null(); } 
    return $User$_to_tuple($User$_not_null(v)); 
}

tuple $User$_to_opt_external(tuple v) inline {
    var loaded = $User$_to_opt_tuple(v);
    if (null?(loaded)) {
        return null();
    } else {
        return (loaded);
    }
}

((int, int, int, int, int, int, int)) $User$_constructor_deposit_prom_code_lastCheck_upCheck_level_roi_penalty(int deposit, int prom_code, int lastCheck, int upCheck, int level, int roi, int penalty) inline {
    return (deposit, prom_code, lastCheck, upCheck, level, roi, penalty);
}

;;
;; Type: DiamonDash
;;

builder $DiamonDash$_store(builder build_0, (slice, int, int, int, cell, cell) v) inline {
    var (v'owner, v'id, v'refnumber, v'taxes, v'balances, v'promos) = v;
    build_0 = __tact_store_address(build_0, v'owner);
    build_0 = build_0.store_uint(v'id, 32);
    build_0 = build_0.store_uint(v'refnumber, 32);
    build_0 = build_0.store_uint(v'taxes, 256);
    build_0 = build_0.store_dict(v'balances);
    build_0 = build_0.store_dict(v'promos);
    return build_0;
}

(slice, ((slice, int, int, int, cell, cell))) $DiamonDash$_load(slice sc_0) inline {
    var v'owner = sc_0~__tact_load_address();
    var v'id = sc_0~load_uint(32);
    var v'refnumber = sc_0~load_uint(32);
    var v'taxes = sc_0~load_uint(256);
    var v'balances = sc_0~load_dict();
    var v'promos = sc_0~load_dict();
    return (sc_0, (v'owner, v'id, v'refnumber, v'taxes, v'balances, v'promos));
}

(slice, ((int))) $DiamonDash$init$_load(slice sc_0) inline {
    var v'id = sc_0~load_int(257);
    return (sc_0, (v'id));
}

(slice, int, int, int, cell, cell) $DiamonDash$_contract_load() impure inline_ref {
    slice $sc = get_data().begin_parse();
    __tact_context_sys = $sc~load_ref();
    int $loaded = $sc~load_int(1);
    if ($loaded) {
        return $sc~$DiamonDash$_load();
    } else {
        ;; Allow only workchain deployments
        throw_unless(137, my_address().preload_uint(11) == 1024);
        (int id) = $sc~$DiamonDash$init$_load();
        $sc.end_parse();
        return $DiamonDash$_contract_init(id);
    }
}

() $DiamonDash$_contract_store((slice, int, int, int, cell, cell) v) impure inline {
    builder b = begin_cell();
    b = b.store_ref(__tact_context_sys);
    b = b.store_int(true, 1);
    b = $DiamonDash$_store(b, v);
    set_data(b.end_cell());
}