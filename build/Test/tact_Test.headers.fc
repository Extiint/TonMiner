;;
;; Header files for Test
;; NOTE: declarations are sorted for optimal order
;;

;; __tact_verify_address
slice __tact_verify_address(slice address) inline;

;; __tact_load_address
(slice, slice) __tact_load_address(slice cs) inline;

;; __tact_store_address
builder __tact_store_address(builder b, slice address) inline;

;; __tact_my_balance
int __tact_my_balance() inline;

;; __tact_not_null
forall X -> X __tact_not_null(X x) inline;

;; __tact_context_get
(int, slice, int, slice) __tact_context_get() inline;

;; __tact_context_get_sender
slice __tact_context_get_sender() inline;

;; __tact_store_bool
builder __tact_store_bool(builder b, int v) inline;

;; __tact_dict_set_slice_cell
(cell, ()) __tact_dict_set_slice_cell(cell d, int kl, slice k, cell v) inline;

;; __tact_dict_get_slice_cell
cell __tact_dict_get_slice_cell(cell d, int kl, slice k) inline;

;; $Deploy$_load
(slice, ((int))) $Deploy$_load(slice sc_0) inline;

;; $DeployOk$_store
builder $DeployOk$_store(builder build_0, (int) v) inline;

;; $DeployOk$_store_cell
cell $DeployOk$_store_cell((int) v) inline;

;; $Add$_load
(slice, (tuple)) $Add$_load(slice sc_0) inline;

;; $BuyMiners$_load
(slice, (tuple)) $BuyMiners$_load(slice sc_0) inline;

;; $SellEggs$_load
(slice, (tuple)) $SellEggs$_load(slice sc_0) inline;

;; $User$_store
builder $User$_store(builder build_0, (int, int, int) v) inline;

;; $User$_store_cell
cell $User$_store_cell((int, int, int) v) inline;

;; $User$_load
(slice, ((int, int, int))) $User$_load(slice sc_0) inline;

;; $User$_as_optional
tuple $User$_as_optional((int, int, int) v) inline;

;; $User$_load_opt
tuple $User$_load_opt(cell cl) inline;

;; $Test$_store
builder $Test$_store(builder build_0, (slice, int, int, int, int, int, cell) v) inline;

;; $Test$_load
(slice, ((slice, int, int, int, int, int, cell))) $Test$_load(slice sc_0) inline;

;; $StateInit$_not_null
((cell, cell)) $StateInit$_not_null(tuple v) inline;

;; $Context$_get_value
_ $Context$_get_value((int, slice, int, slice) v) inline;

;; $User$_not_null
((int, int, int)) $User$_not_null(tuple v) inline;

;; $User$_to_tuple
tuple $User$_to_tuple(((int, int, int)) v) inline;

;; $User$_to_opt_tuple
tuple $User$_to_opt_tuple(tuple v) inline;

;; $User$_from_tuple
(int, int, int) $User$_from_tuple(tuple v) inline;

;; $User$_to_opt_external
tuple $User$_to_opt_external(tuple v) inline;

;; $Test$init$_load
(slice, ((int))) $Test$init$_load(slice sc_0) inline;

;; $Test$_contract_init
(slice, int, int, int, int, int, cell) $Test$_contract_init(int $id) impure inline_ref;

;; $Test$_contract_load
(slice, int, int, int, int, int, cell) $Test$_contract_load() impure inline_ref;

;; $Test$_contract_store
() $Test$_contract_store((slice, int, int, int, int, int, cell) v) impure inline;

;; $global_send
() $global_send((int, slice, int, int, cell, cell, cell) $params) impure inline_ref;

;; $User$_constructor_lastHatch_hatcheryMiners_claimedEggs
((int, int, int)) $User$_constructor_lastHatch_hatcheryMiners_claimedEggs(int lastHatch, int hatcheryMiners, int claimedEggs) inline;

;; $Test$_fun_balanceOff
((slice, int, int, int, int, int, cell), tuple) $Test$_fun_balanceOff((slice, int, int, int, int, int, cell) $self, slice $address) impure inline_ref;

;; $Test$_fun_min
((slice, int, int, int, int, int, cell), int) $Test$_fun_min((slice, int, int, int, int, int, cell) $self, int $a, int $b) impure inline_ref;

;; $Test$_fun_getEggsSinceLastHatch
((slice, int, int, int, int, int, cell), int) $Test$_fun_getEggsSinceLastHatch((slice, int, int, int, int, int, cell) $self, slice $address, (int, int, int) $myUser) impure inline_ref;

;; $Test$_fun_getMyEggs
((slice, int, int, int, int, int, cell), int) $Test$_fun_getMyEggs((slice, int, int, int, int, int, cell) $self, slice $address) impure inline_ref;

;; $Test$_fun_hatchEggs
((slice, int, int, int, int, int, cell), ()) $Test$_fun_hatchEggs((slice, int, int, int, int, int, cell) $self) impure inline_ref;

;; $Test$_fun_calculateTrade
((slice, int, int, int, int, int, cell), int) $Test$_fun_calculateTrade((slice, int, int, int, int, int, cell) $self, int $rt, int $rs, int $bs) impure inline_ref;

;; $Test$_fun_calculateEggBuy
((slice, int, int, int, int, int, cell), int) $Test$_fun_calculateEggBuy((slice, int, int, int, int, int, cell) $self, int $ton, int $contractbalance) impure inline_ref;

;; $Test$_fun_calculateEggSell
((slice, int, int, int, int, int, cell), int) $Test$_fun_calculateEggSell((slice, int, int, int, int, int, cell) $self, int $eggs) impure inline_ref;

;; $Test$_fun_lastHatch
((slice, int, int, int, int, int, cell), int) $Test$_fun_lastHatch((slice, int, int, int, int, int, cell) $self, slice $address) impure inline_ref;

;; $Test$_fun_hatcheryMiners
((slice, int, int, int, int, int, cell), int) $Test$_fun_hatcheryMiners((slice, int, int, int, int, int, cell) $self, slice $address) impure inline_ref;

;; $Test$_fun_claimedEggs
((slice, int, int, int, int, int, cell), int) $Test$_fun_claimedEggs((slice, int, int, int, int, int, cell) $self, slice $address) impure inline_ref;

;; $Test$_fun_mybalance
((slice, int, int, int, int, int, cell), int) $Test$_fun_mybalance((slice, int, int, int, int, int, cell) $self) impure inline_ref;

;; $SendParameters$_constructor_bounce_to_value_mode_body_code_data
((int, slice, int, int, cell, cell, cell)) $SendParameters$_constructor_bounce_to_value_mode_body_code_data(int bounce, slice to, int value, int mode, cell body, cell code, cell data) inline;

;; $Test$_fun_forward
((slice, int, int, int, int, int, cell), ()) $Test$_fun_forward((slice, int, int, int, int, int, cell) $self, slice $to, cell $body, int $bounce, tuple $init) impure inline_ref;

;; $Test$_fun_notify
((slice, int, int, int, int, int, cell), ()) $Test$_fun_notify((slice, int, int, int, int, int, cell) $self, cell $body) impure inline;

;; $Test$_fun_owner
((slice, int, int, int, int, int, cell), slice) $Test$_fun_owner((slice, int, int, int, int, int, cell) $self) impure inline_ref;

;; $SendParameters$_constructor_to_value
((int, slice, int, int, cell, cell, cell)) $SendParameters$_constructor_to_value(slice to, int value) inline;

;; $DeployOk$_constructor_queryId
((int)) $DeployOk$_constructor_queryId(int queryId) inline;
