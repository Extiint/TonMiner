;;
;; Type: StateInit
;; TLB: _ code:^cell data:^cell = StateInit
;;

((cell, cell)) $StateInit$_not_null(tuple v) inline {
    throw_if(128, null?(v));
    var (cell vvv'code, cell vvv'data) = __tact_tuple_destroy_2(v);
    return (vvv'code, vvv'data);
}

;;
;; Type: Context
;; TLB: _ bounced:bool sender:address value:int257 raw:^slice = Context
;;

_ $Context$_get_value((int, slice, int, slice) v) inline {
    var (v'bounced, v'sender, v'value, v'raw) = v;
    return v'value;
}

;;
;; Type: SendParameters
;; TLB: _ bounce:bool to:address value:int257 mode:int257 body:Maybe ^cell code:Maybe ^cell data:Maybe ^cell = SendParameters
;;

((int, slice, int, int, cell, cell, cell)) $SendParameters$_constructor_bounce_to_value_mode_body_code_data(int bounce, slice to, int value, int mode, cell body, cell code, cell data) inline {
    return (bounce, to, value, mode, body, code, data);
}

((int, slice, int, int, cell, cell, cell)) $SendParameters$_constructor_to_value(slice to, int value) inline {
    return (true, to, value, 0, null(), null(), null());
}

;;
;; Type: Deploy
;; Header: 0x946a98b6
;; TLB: deploy#946a98b6 queryId:uint64 = Deploy
;;

(slice, ((int))) $Deploy$_load(slice sc_0) inline {
    throw_unless(129, sc_0~load_uint(32) == 2490013878);
    var v'queryId = sc_0~load_uint(64);
    return (sc_0, (v'queryId));
}

;;
;; Type: DeployOk
;; Header: 0xaff90f57
;; TLB: deploy_ok#aff90f57 queryId:uint64 = DeployOk
;;

builder $DeployOk$_store(builder build_0, (int) v) inline {
    var (v'queryId) = v;
    build_0 = store_uint(build_0, 2952335191, 32);
    build_0 = build_0.store_uint(v'queryId, 64);
    return build_0;
}

cell $DeployOk$_store_cell((int) v) inline {
    return $DeployOk$_store(begin_cell(), v).end_cell();
}

((int)) $DeployOk$_constructor_queryId(int queryId) inline {
    return (queryId);
}

;;
;; Type: Add
;; Header: 0x3a090939
;; TLB: add#3a090939  = Add
;;

(slice, (tuple)) $Add$_load(slice sc_0) inline {
    throw_unless(129, sc_0~load_uint(32) == 973670713);
    return (sc_0, null());
}

;;
;; Type: BuyMiners
;; Header: 0xc2e3d2d5
;; TLB: buy_miners#c2e3d2d5  = BuyMiners
;;

(slice, (tuple)) $BuyMiners$_load(slice sc_0) inline {
    throw_unless(129, sc_0~load_uint(32) == 3269710549);
    return (sc_0, null());
}

;;
;; Type: SellEggs
;; Header: 0x3a5b6e1b
;; TLB: sell_eggs#3a5b6e1b  = SellEggs
;;

(slice, (tuple)) $SellEggs$_load(slice sc_0) inline {
    throw_unless(129, sc_0~load_uint(32) == 979070491);
    return (sc_0, null());
}

;;
;; Type: User
;; TLB: _ lastHatch:uint32 hatcheryMiners:uint256 claimedEggs:uint256 = User
;;

builder $User$_store(builder build_0, (int, int, int) v) inline {
    var (v'lastHatch, v'hatcheryMiners, v'claimedEggs) = v;
    build_0 = build_0.store_uint(v'lastHatch, 32);
    build_0 = build_0.store_uint(v'hatcheryMiners, 256);
    build_0 = build_0.store_uint(v'claimedEggs, 256);
    return build_0;
}

cell $User$_store_cell((int, int, int) v) inline {
    return $User$_store(begin_cell(), v).end_cell();
}

(slice, ((int, int, int))) $User$_load(slice sc_0) inline {
    var v'lastHatch = sc_0~load_uint(32);
    var v'hatcheryMiners = sc_0~load_uint(256);
    var v'claimedEggs = sc_0~load_uint(256);
    return (sc_0, (v'lastHatch, v'hatcheryMiners, v'claimedEggs));
}

tuple $User$_as_optional((int, int, int) v) inline {
    var (v'lastHatch, v'hatcheryMiners, v'claimedEggs) = v;
    return __tact_tuple_create_3(v'lastHatch, v'hatcheryMiners, v'claimedEggs);
}

tuple $User$_load_opt(cell cl) inline {
    if (null?(cl)) {
        return null();
    }
    var sc = cl.begin_parse();
    return $User$_as_optional(sc~$User$_load());
}

((int, int, int)) $User$_not_null(tuple v) inline {
    throw_if(128, null?(v));
    var (int vvv'lastHatch, int vvv'hatcheryMiners, int vvv'claimedEggs) = __tact_tuple_destroy_3(v);
    return (vvv'lastHatch, vvv'hatcheryMiners, vvv'claimedEggs);
}

tuple $User$_to_tuple(((int, int, int)) v) inline {
    var (v'lastHatch, v'hatcheryMiners, v'claimedEggs) = v;
    return __tact_tuple_create_3(v'lastHatch, v'hatcheryMiners, v'claimedEggs);
}

tuple $User$_to_opt_tuple(tuple v) inline {
    if (null?(v)) { return null(); } 
    return $User$_to_tuple($User$_not_null(v)); 
}

(int, int, int) $User$_from_tuple(tuple v) inline {
    var (int v'lastHatch, int v'hatcheryMiners, int v'claimedEggs) = __tact_tuple_destroy_3(v);
    return (v'lastHatch, v'hatcheryMiners, v'claimedEggs);
}

tuple $User$_to_opt_external(tuple v) inline {
    var loaded = $User$_to_opt_tuple(v);
    if (null?(loaded)) {
        return null();
    } else {
        return (loaded);
    }
}

((int, int, int)) $User$_constructor_lastHatch_hatcheryMiners_claimedEggs(int lastHatch, int hatcheryMiners, int claimedEggs) inline {
    return (lastHatch, hatcheryMiners, claimedEggs);
}

;;
;; Type: Test
;;

builder $Test$_store(builder build_0, (slice, int, int, int, int, int, cell) v) inline {
    var (v'owner, v'id, v'marketEggs, v'PSN, v'PSNH, v'EGGS_TO_HATCH_1MINERS, v'balances) = v;
    build_0 = __tact_store_address(build_0, v'owner);
    build_0 = build_0.store_uint(v'id, 32);
    build_0 = build_0.store_uint(v'marketEggs, 256);
    build_0 = build_0.store_uint(v'PSN, 256);
    var build_1 = begin_cell();
    build_1 = build_1.store_uint(v'PSNH, 256);
    build_1 = build_1.store_uint(v'EGGS_TO_HATCH_1MINERS, 256);
    build_1 = build_1.store_dict(v'balances);
    build_0 = store_ref(build_0, build_1.end_cell());
    return build_0;
}

(slice, ((slice, int, int, int, int, int, cell))) $Test$_load(slice sc_0) inline {
    var v'owner = sc_0~__tact_load_address();
    var v'id = sc_0~load_uint(32);
    var v'marketEggs = sc_0~load_uint(256);
    var v'PSN = sc_0~load_uint(256);
    slice sc_1 = sc_0~load_ref().begin_parse();
    var v'PSNH = sc_1~load_uint(256);
    var v'EGGS_TO_HATCH_1MINERS = sc_1~load_uint(256);
    var v'balances = sc_1~load_dict();
    return (sc_0, (v'owner, v'id, v'marketEggs, v'PSN, v'PSNH, v'EGGS_TO_HATCH_1MINERS, v'balances));
}

(slice, ((int))) $Test$init$_load(slice sc_0) inline {
    var v'id = sc_0~load_int(257);
    return (sc_0, (v'id));
}

(slice, int, int, int, int, int, cell) $Test$_contract_load() impure inline_ref {
    slice $sc = get_data().begin_parse();
    __tact_context_sys = $sc~load_ref();
    int $loaded = $sc~load_int(1);
    if ($loaded) {
        return $sc~$Test$_load();
    } else {
        ;; Allow only workchain deployments
        throw_unless(137, my_address().preload_uint(11) == 1024);
        (int id) = $sc~$Test$init$_load();
        $sc.end_parse();
        return $Test$_contract_init(id);
    }
}

() $Test$_contract_store((slice, int, int, int, int, int, cell) v) impure inline {
    builder b = begin_cell();
    b = b.store_ref(__tact_context_sys);
    b = b.store_int(true, 1);
    b = $Test$_store(b, v);
    set_data(b.end_cell());
}