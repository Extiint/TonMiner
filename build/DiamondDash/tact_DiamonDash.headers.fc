;;
;; Header files for DiamonDash
;; NOTE: declarations are sorted for optimal order
;;

;; __tact_verify_address
slice __tact_verify_address(slice address) inline;

;; __tact_load_address
(slice, slice) __tact_load_address(slice cs) inline;

;; __tact_store_address
builder __tact_store_address(builder b, slice address) inline;

;; __tact_my_balance
int __tact_my_balance() inline;

;; __tact_not_null
forall X -> X __tact_not_null(X x) inline;

;; __tact_context_get
(int, slice, int, slice) __tact_context_get() inline;

;; __tact_context_get_sender
slice __tact_context_get_sender() inline;

;; __tact_prepare_random
() __tact_prepare_random() impure inline;

;; __tact_store_bool
builder __tact_store_bool(builder b, int v) inline;

;; __tact_dict_set_int_int
(cell, ()) __tact_dict_set_int_int(cell d, int kl, int k, int v, int vl) inline;

;; __tact_dict_get_int_int
int __tact_dict_get_int_int(cell d, int kl, int k, int vl) inline;

;; __tact_dict_set_slice_cell
(cell, ()) __tact_dict_set_slice_cell(cell d, int kl, slice k, cell v) inline;

;; __tact_dict_get_slice_cell
cell __tact_dict_get_slice_cell(cell d, int kl, slice k) inline;

;; __tact_slice_eq_bits
int __tact_slice_eq_bits(slice a, slice b) inline;

;; $Deploy$_load
(slice, ((int))) $Deploy$_load(slice sc_0) inline;

;; $DeployOk$_store
builder $DeployOk$_store(builder build_0, (int) v) inline;

;; $DeployOk$_store_cell
cell $DeployOk$_store_cell((int) v) inline;

;; $BuyPickAxe$_load
(slice, ((int))) $BuyPickAxe$_load(slice sc_0) inline;

;; $NewBuy$_store
builder $NewBuy$_store(builder build_0, (int, slice) v) inline;

;; $NewBuy$_store_cell
cell $NewBuy$_store_cell((int, slice) v) inline;

;; $User$_store
builder $User$_store(builder build_0, (int, int, int, int, int, int, int) v) inline_ref;

;; $User$_store_cell
cell $User$_store_cell((int, int, int, int, int, int, int) v) inline;

;; $User$_load
(slice, ((int, int, int, int, int, int, int))) $User$_load(slice sc_0) inline_ref;

;; $User$_as_optional
tuple $User$_as_optional((int, int, int, int, int, int, int) v) inline;

;; $User$_load_opt
tuple $User$_load_opt(cell cl) inline;

;; $DiamonDash$_store
builder $DiamonDash$_store(builder build_0, (slice, int, int, int, cell, cell) v) inline;

;; $DiamonDash$_load
(slice, ((slice, int, int, int, cell, cell))) $DiamonDash$_load(slice sc_0) inline;

;; $StateInit$_not_null
((cell, cell)) $StateInit$_not_null(tuple v) inline;

;; $Context$_get_value
_ $Context$_get_value((int, slice, int, slice) v) inline;

;; $User$_get_prom_code
_ $User$_get_prom_code((int, int, int, int, int, int, int) v) inline;

;; $User$_get_lastCheck
_ $User$_get_lastCheck((int, int, int, int, int, int, int) v) inline;

;; $User$_not_null
((int, int, int, int, int, int, int)) $User$_not_null(tuple v) inline;

;; $User$_to_tuple
tuple $User$_to_tuple(((int, int, int, int, int, int, int)) v) inline;

;; $User$_to_opt_tuple
tuple $User$_to_opt_tuple(tuple v) inline;

;; $User$_to_opt_external
tuple $User$_to_opt_external(tuple v) inline;

;; $DiamonDash$init$_load
(slice, ((int))) $DiamonDash$init$_load(slice sc_0) inline;

;; $DiamonDash$_contract_init
(slice, int, int, int, cell, cell) $DiamonDash$_contract_init(int $id) impure inline_ref;

;; $DiamonDash$_contract_load
(slice, int, int, int, cell, cell) $DiamonDash$_contract_load() impure inline_ref;

;; $DiamonDash$_contract_store
() $DiamonDash$_contract_store((slice, int, int, int, cell, cell) v) impure inline;

;; $global_random
int $global_random(int $min, int $max) impure inline;

;; $global_send
() $global_send((int, slice, int, int, cell, cell, cell) $params) impure inline_ref;

;; $global_emit
() $global_emit(cell $body) impure inline;

;; $User$_constructor_deposit_prom_code_lastCheck_upCheck_level_roi_penalty
((int, int, int, int, int, int, int)) $User$_constructor_deposit_prom_code_lastCheck_upCheck_level_roi_penalty(int deposit, int prom_code, int lastCheck, int upCheck, int level, int roi, int penalty) inline;

;; $SendParameters$_constructor_to_value
((int, slice, int, int, cell, cell, cell)) $SendParameters$_constructor_to_value(slice to, int value) inline;

;; $DiamonDash$_fun_balanceOff
((slice, int, int, int, cell, cell), tuple) $DiamonDash$_fun_balanceOff((slice, int, int, int, cell, cell) $self, slice $address) impure inline_ref;

;; $DiamonDash$_fun_getRewards
((slice, int, int, int, cell, cell), int) $DiamonDash$_fun_getRewards((slice, int, int, int, cell, cell) $self, slice $address) impure inline_ref;

;; $DiamonDash$_fun_sendtax
((slice, int, int, int, cell, cell), ()) $DiamonDash$_fun_sendtax((slice, int, int, int, cell, cell) $self) impure inline_ref;

;; $DiamonDash$_fun_withdraw
((slice, int, int, int, cell, cell), ()) $DiamonDash$_fun_withdraw((slice, int, int, int, cell, cell) $self) impure inline_ref;

;; $DiamonDash$_fun_promoCode
((slice, int, int, int, cell, cell), int) $DiamonDash$_fun_promoCode((slice, int, int, int, cell, cell) $self, slice $address) impure inline_ref;

;; $DiamonDash$_fun_lastCheck
((slice, int, int, int, cell, cell), int) $DiamonDash$_fun_lastCheck((slice, int, int, int, cell, cell) $self, slice $address) impure inline_ref;

;; $DiamonDash$_fun_mybalance
((slice, int, int, int, cell, cell), int) $DiamonDash$_fun_mybalance((slice, int, int, int, cell, cell) $self) impure inline_ref;

;; $SendParameters$_constructor_bounce_to_value_mode_body_code_data
((int, slice, int, int, cell, cell, cell)) $SendParameters$_constructor_bounce_to_value_mode_body_code_data(int bounce, slice to, int value, int mode, cell body, cell code, cell data) inline;

;; $DiamonDash$_fun_forward
((slice, int, int, int, cell, cell), ()) $DiamonDash$_fun_forward((slice, int, int, int, cell, cell) $self, slice $to, cell $body, int $bounce, tuple $init) impure inline_ref;

;; $DiamonDash$_fun_notify
((slice, int, int, int, cell, cell), ()) $DiamonDash$_fun_notify((slice, int, int, int, cell, cell) $self, cell $body) impure inline;

;; $DiamonDash$_fun_owner
((slice, int, int, int, cell, cell), slice) $DiamonDash$_fun_owner((slice, int, int, int, cell, cell) $self) impure inline_ref;

;; $NewBuy$_constructor_amount_sender
((int, slice)) $NewBuy$_constructor_amount_sender(int amount, slice sender) inline;

;; $DeployOk$_constructor_queryId
((int)) $DeployOk$_constructor_queryId(int queryId) inline;
